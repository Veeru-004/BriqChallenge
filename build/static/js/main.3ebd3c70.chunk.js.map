{"version":3,"sources":["QuoteCopy.js","App.js","reportWebVitals.js","index.js"],"names":["QuoteCopy","useState","selectedQuote","getQuote","quote","setQuote","rating","setRating","QuoteFunc","fetch","then","response","json","data","randomNum","Math","floor","random","length","filteredArray","forEach","obj","score","stringSimilarity","compareTwoStrings","text","tempObj","author","push","sort","a","b","value","console","log","useEffect","className","onClick","rate","ratingValue","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAKe,SAASA,IAGpB,MAAkCC,mBAAS,KAA3C,mBAAOC,EAAP,KAAsBC,EAAtB,KAGA,EAA0BF,mBAAS,KAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAGA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAaMC,EAAY,WACdC,MAAM,+BACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACH,GAAIP,EAAS,EAAG,CACZ,IAAIQ,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAChDb,EAASQ,EAAKC,QAEb,CACD,IAAMK,EAAgB,GACNN,EAAKO,SAAQ,SAAAC,GACzB,IAAIC,EAAQC,IAAiBC,kBAAkBH,EAAII,KAAMvB,GACzD,GAAIoB,EAAQ,EAAG,CACX,IAAII,EAAU,CACV,MAASJ,EACT,KAAQD,EAAII,KACZ,OAAUJ,EAAIM,QAElBR,EAAcS,KAAKF,OAM3BP,EAAcU,MAAK,SAAUC,EAAGC,GAC5B,OAAQD,EAAEE,MAAQD,EAAEC,SAIxB,IAAIlB,EAAYC,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,MAChDgB,QAAQC,IAAIf,GACZd,EAASc,EAAcL,OAGzBP,EAAU,KAQxB,OAJA4B,qBAAU,WACN3B,MACD,IAGC,mCACI,yBAAS4B,UAAU,OAAnB,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,mBAAf,SACI,yBAAQA,UAAU,mBAAlB,UACI,8CACA,4EAGR,8BACI,qBAAKA,UAAU,mBAAf,SACI,6BAAYA,UAAU,sDAAtB,UACI,qBAAKA,UAAU,2CAAf,SAA0D,mBAAGA,UAAU,kCACvE,oBAAGA,UAAU,cAAb,UAA4BhC,EAAMqB,KAAlC,UACA,wBAAQW,UAAU,yCAAlB,SAA4DhC,EAAMuB,SAElE,cAAC,SAAD,CAAQS,UAAU,MAAMC,QArE/B,SAACC,GAClB/B,EAAU+B,GAENnC,EADAmC,EAAO,EACElC,EAAMqB,KAGN,MA+D0Dc,YAAajC,IAAU,uBACtE,wBAAQ8B,UAAU,MAAMC,QAAS7B,EAAjC,yCCrFjB,SAASgC,IACrB,OACC,8BACA,cAACxC,EAAD,MCLJ,IAYeyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3ebd3c70.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Rating } from 'react-simple-star-rating'\r\nimport './App.css';\r\nimport stringSimilarity from 'string-similarity'\r\n\r\nexport default function QuoteCopy() {\r\n\r\n    //To set the selected author once the rating changed\r\n    const [selectedQuote, getQuote] = useState(\" \");\r\n\r\n    //To set the quote based on author selection\r\n    const [quote, setQuote] = useState(\" \");\r\n\r\n    //To set the rating value based on the rating\r\n    const [rating, setRating] = useState(0);\r\n\r\n    //Inbuilt Function to get the rating value and set the selected author\r\n    const handleRating = (rate) => {\r\n        setRating(rate)\r\n        if (rate > 3) {\r\n            getQuote(quote.text)\r\n        }\r\n        else {\r\n            getQuote(\" \")\r\n        }\r\n    }\r\n    //Function to get random quote on applying logic\r\n    const QuoteFunc = () => {\r\n        fetch(\"https://type.fit/api/quotes\")\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                if (rating < 4) {\r\n                    let randomNum = Math.floor(Math.random() * data.length);\r\n                    setQuote(data[randomNum]);\r\n                }\r\n                else {\r\n                    const filteredArray = [];\r\n                    const compare = data.forEach(obj => {\r\n                        let score = stringSimilarity.compareTwoStrings(obj.text, selectedQuote)\r\n                        if (score > 0) {\r\n                            let tempObj = {\r\n                                \"value\": score,\r\n                                \"text\": obj.text,\r\n                                \"author\": obj.author,\r\n                            }\r\n                            filteredArray.push(tempObj);\r\n                        }\r\n                    }\r\n                    )\r\n\r\n                    //Filter array using score\r\n                    filteredArray.sort(function (a, b) {\r\n                        return (a.value - b.value);\r\n                    })\r\n\r\n                    //setting index the most last element to achieve the highest score\r\n                    let randomNum = Math.floor(Math.random() * 42 + 1600);\r\n                    console.log(filteredArray)\r\n                    setQuote(filteredArray[randomNum]);\r\n                }\r\n            }\r\n                , setRating(0)\r\n            )\r\n    }\r\n\r\n    useEffect(() => {\r\n        QuoteFunc();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <section className=\"py-4\">\r\n                <div className=\"container\">\r\n                    <div className=\"col-lg-6 mx-auto\">\r\n                        <header className=\"text-center pb-4\">\r\n                            <h1>Random Quote</h1>\r\n                            <p>Give 4/5 Star rating for Similar Quote</p>\r\n                        </header>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"col-lg-8 mx-auto\">\r\n                            <blockquote className=\"blockquote-custom bg-transperent p-5 shadow rounded\">\r\n                                <div className=\"blockquote-custom-icon bg-info shadow-sm\"><i className=\"fa fa-quote-left text-white\"></i></div>\r\n                                <p className=\"font-italic\">{quote.text}...\"</p>\r\n                                <footer className=\"blockquote-footer pt-3 mt-4 border-top\">{quote.author}\r\n                                </footer>\r\n                                <Rating className=\"btn\" onClick={handleRating} ratingValue={rating} /><br />\r\n                                <button className=\"btn\" onClick={QuoteFunc}>Get New Qoute</button>\r\n                            </blockquote>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </>\r\n    );\r\n}\r\n\r\n","import QuoteCopy from \"./QuoteCopy\";\r\n\r\nexport default function App() {\r\n   return (\r\n    <div >\r\n    <QuoteCopy/>\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}