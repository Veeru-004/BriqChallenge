{"version":3,"sources":["Quote.js","App.js","reportWebVitals.js","index.js"],"names":["Quote","useState","selectedAuthor","getAuthor","quotes","setQuotes","rating","setRating","fetch","then","response","json","data","randomNum","Math","floor","random","length","getQoute","filtered","filter","a","author","useEffect","class","text","title","className","onClick","rate","ratingValue","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAIe,SAASA,IAEtB,MAAoCC,mBAAS,KAA7C,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA4BF,mBAAS,KAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAYMP,EAAQ,WACZQ,MAAM,+BACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACL,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAChDZ,EAAUO,EAAKC,IACfN,EAAU,OAIVW,EAAW,WACXZ,EAAS,EACXN,IAGAQ,MAAM,+BACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACL,IAAIO,EAAWP,EAAKQ,QAAO,SAAAC,GAAC,OAAIA,EAAEC,SAAWpB,KAC7C,GAAwB,IAApBiB,EAASF,OAAb,CAIA,IAAIJ,EAAYC,KAAKC,MAAMD,KAAKE,SAAWG,EAASF,QACpDZ,EAAUc,EAASN,IACnBN,EAAU,QALRP,QAYV,OAHAuB,qBAAU,WACRL,MACC,IAED,mCACE,yBAASM,MAAM,OAAf,SACE,sBAAKA,MAAM,YAAX,UACE,qBAAKA,MAAM,MAAX,SACE,qBAAKA,MAAM,mBAAX,SACE,yBAAQA,MAAM,mBAAd,UACE,oBAAIA,MAAM,KAAV,0BACA,8BAAG,uBAAH,uDAIN,qBAAKA,MAAM,MAAX,SACE,qBAAKA,MAAM,mBAAX,SACE,6BAAYA,MAAM,2DAAlB,UACE,qBAAKA,MAAM,2CAAX,SAAsD,mBAAGA,MAAM,kCAC/D,oBAAGA,MAAM,wBAAT,UAAkCpB,EAAOqB,KAAzC,UAEA,wBAAQD,MAAM,yCAAd,SAAuD,sBAAME,MAAM,eAAZ,SAA4BtB,EAAOkB,WAE1F,cAAC,SAAD,CAAQK,UAAU,MAAMC,QA9DjB,SAACC,GACpBtB,EAAUsB,GAGR1B,EAFU0B,EACA,EACAzB,EAAOkB,OAGP,MAuD+CQ,YAAaxB,IAAU,uBACtE,wBAAQqB,UAAU,MAAMC,QAASV,EAAjC,yCCvED,SAASa,IACrB,OACC,8BACA,cAAC,EAAD,MCLJ,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8f122cea.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Rating } from 'react-simple-star-rating'\r\nimport './App.css';\r\n\r\nexport default function Quote() {\r\n\r\n  const [selectedAuthor, getAuthor] = useState(\" \");\r\n  const [quotes, setQuotes] = useState(\" \");\r\n  const [rating, setRating] = useState(0);\r\n\r\n  const handleRating = (rate) => {\r\n    setRating(rate)\r\n    let value = rate;\r\n    if (value > 3) {\r\n      getAuthor(quotes.author)\r\n    }\r\n    else {\r\n      getAuthor(\" \")\r\n    }\r\n  }\r\n  const Quote = () => {\r\n    fetch(\"https://type.fit/api/quotes\")\r\n      .then(response => response.json())\r\n      .then((data) => {\r\n        let randomNum = Math.floor(Math.random() * data.length);\r\n        setQuotes(data[randomNum]);\r\n        setRating(0)\r\n      })\r\n  }\r\n\r\n  const getQoute = () => {\r\n    if (rating < 4) {\r\n      Quote();\r\n    }\r\n    else {\r\n      fetch(\"https://type.fit/api/quotes\")\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n          var filtered = data.filter(a => a.author === selectedAuthor);\r\n          if (filtered.length === 1) {\r\n            Quote();\r\n            return;\r\n          }\r\n          let randomNum = Math.floor(Math.random() * filtered.length);\r\n          setQuotes(filtered[randomNum]);\r\n          setRating(0)\r\n        })\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    getQoute();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <section class=\"py-5\">\r\n        <div class=\"container\">\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-6 mx-auto\">\r\n              <header class=\"text-center pb-5\">\r\n                <h1 class=\"h2\">Random Quote</h1>\r\n                <p><br />Give 4/5 Star rating for Same Author Quote</p>\r\n              </header>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-6 mx-auto\">\r\n              <blockquote class=\"blockquote blockquote-custom bg-white p-5 shadow rounded\">\r\n                <div class=\"blockquote-custom-icon bg-info shadow-sm\"><i class=\"fa fa-quote-left text-white\"></i></div>\r\n                <p class=\"mb-0 mt-2 font-italic\">{quotes.text}...\"</p>\r\n\r\n                <footer class=\"blockquote-footer pt-4 mt-4 border-top\"><cite title=\"Source Title\">{quotes.author}</cite>\r\n                </footer>\r\n                <Rating className=\"btn\" onClick={handleRating} ratingValue={rating} /><br />\r\n                <button className=\"btn\" onClick={getQoute}>Get New Qoute</button>\r\n              </blockquote>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\n","import Quote from \"./Quote\";\n\nexport default function App() {\n   return (\n    <div >\n    <Quote/>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}